#include <iostream>
#include <random>
#include <cstdlib>
#include <CGAL/Simple_cartesian.h>
#include <CGAL/Surface_mesh.h>

typedef CGAL::Simple_cartesian<double> Kd;
typedef Kd::Point_3 Point3d;
typedef CGAL::Bbox_3 Bbox3d;

double uniformDouble(double min, double max) 
{
    std::random_device m_rseed;
    std::mt19937 rgen(m_rseed());
    std::uniform_real_distribution<double> ddist(min,max);
    return ddist(rgen);
}

double normalDouble(double mean, double variance) 
{
    std::random_device m_rseed;
    std::mt19937 rgen(m_rseed());
    std::normal_distribution<double> ddist(mean,variance);
    return ddist(rgen);
}

std::vector<double> uniformDoubleVector(int amount, double min, double max) 
{
    std::random_device m_rseed;
    std::vector<double> result;
    result.reserve(amount);
    std::mt19937 rgen(m_rseed());
    std::uniform_real_distribution<double> ddist(min,max);
    while(result.size() < amount) {
        result.push_back(ddist(rgen));
    }
    return result;
}

int uniformInt(int min, int max) 
{
    std::random_device m_rseed;
    std::mt19937 rgen(m_rseed());
    std::uniform_int_distribution<int> ddist(min,max);
    return ddist(rgen);
}

std::vector<int> uniformIntVector(int amount, int min, int max) 
{
    std::random_device m_rseed;
    std::vector<int> result;
    result.reserve(amount);
    std::mt19937 rgen(m_rseed());
    std::uniform_int_distribution<int> ddist(min,max);
    while(result.size() < amount) {
        result.push_back(ddist(rgen));
    }
    return result;
}

int main()
{
    // INPUT
    Bbox3d bbox(0,0,0,1,2,3);
    int sideConstraint = -1;
    int num = 1000000;

    int sideCounter[6] = {0};

    for(int i = 0; i < num; i++)
    {
        assert(sideConstraint >= -1 && sideConstraint <= 5);

        double dim[] = {bbox.xmax()-bbox.xmin(),bbox.ymax()-bbox.ymin(),bbox.zmax()-bbox.zmin()};
        double areas[] = {dim[1]*dim[2],dim[0]*dim[2],dim[0]*dim[1]};
        double totAreas = areas[0]+areas[1]+areas[2];
        double unifAreas[] = {areas[0]/totAreas,areas[1]/totAreas,areas[2]/totAreas};
        /* double totDim = dim[0]+dim[1]+dim[2]; */
        /* double unifDim[] = {dim[0]/totDim,dim[1]/totDim,dim[2]/totDim}; */
        int side = 0;
        double randDimChooser = uniformDouble(0,1);
        if(randDimChooser < unifAreas[0])
        {
            side = (sideConstraint != 0 && randDimChooser < 0.5*unifAreas[0]) ? 0 : 1;
        } else if(randDimChooser < unifAreas[0]+unifAreas[1])
        {
            side = (sideConstraint != 2 && randDimChooser < unifAreas[0]+0.5*unifAreas[1]) ? 2 : 3;
        } else 
        {
            side = (sideConstraint != 4 && randDimChooser < 1-0.5*unifAreas[2]) ? 4 : 5;
        }
        sideCounter[side]++;

        double rand1 = uniformDouble(0,dim[(side/2+1)%3]);
        double rand2 = uniformDouble(0,dim[(side/2+2)%3]);
        Point3d result;
        if(side/2 == 0)
        {
            result = Point3d((side == 0) ? bbox.xmin() : bbox.xmax(), rand1, rand2);
        } else if(side/2 == 1)
        {
            result = Point3d(rand2, (side == 2) ? bbox.ymin() : bbox.ymax(), rand1);
        } else
        {
            result = Point3d(rand1, rand2, (side == 4) ? bbox.zmin() : bbox.zmax());
        }
        std::cout << result.x() << " " << result.y() << " " << result.z();
        if ( i != num-1)
            std::cout << std::endl;
    }

    for(int i = 0; i < 6; i++)
    {
        std::cerr << "Side  " << i << ":" << sideCounter[i] << std::endl;
    }

}
